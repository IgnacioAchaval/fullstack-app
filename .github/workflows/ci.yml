name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: taskmanager
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies
      run: |
        cd backend && npm install
        cd ../frontend && npm install

    - name: Run Backend Unit Tests
      run: |
        cd backend
        npm test
      env:
        POSTGRES_HOST: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: taskmanager

    - name: Run Frontend Unit Tests
      run: |
        cd frontend
        npm test

  build-and-push:
    needs: unit-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/task-manager-backend:latest

    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/task-manager-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    
    - name: Create SSH key file
      run: |
        mkdir -p $GITHUB_WORKSPACE/.ssh
        echo "${{ secrets.AWS_KEY }}" > $GITHUB_WORKSPACE/.ssh/ec2_key.pem
        chmod 600 $GITHUB_WORKSPACE/.ssh/ec2_key.pem
        ls -la $GITHUB_WORKSPACE/.ssh/
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USER }}
        key_path: $GITHUB_WORKSPACE/.ssh/ec2_key.pem
        debug: true
        script: |
          cd /home/ec2-user/task-manager
          docker-compose pull
          docker-compose up -d

  integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies
      run: |
        cd backend && npm install

    - name: Run Integration Tests
      run: |
        cd backend
        npm run test:integration
      env:
        API_URL: ${{ secrets.PRODUCTION_API_URL }}
        POSTGRES_HOST: ${{ secrets.PROD_DB_HOST }}
        POSTGRES_USER: ${{ secrets.PROD_DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        POSTGRES_DB: ${{ secrets.PROD_DB_NAME }} 