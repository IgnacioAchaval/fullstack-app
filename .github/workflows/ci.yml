name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      - name: Run backend unit tests
        working-directory: ./backend
        run: npm test
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      - name: Run frontend unit tests
        working-directory: ./frontend
        run: npm test

  build-and-push:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/fullstack-app-backend:latest
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/fullstack-app-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.AWS_HOST }}" ]; then
            echo "::error::AWS_HOST secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_KEY }}" ]; then
            echo "::error::AWS_KEY secret is not set"
            exit 1
          fi
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -v ubuntu@${{ secrets.AWS_HOST }} 'echo "SSH connection successful"'
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ubuntu
          key: ${{ secrets.AWS_KEY }}
          port: 22
          debug: true
          script: |
            # Clean up Docker resources
            docker system prune -af --volumes
            # Create app directory
            mkdir -p /home/ubuntu/fullstack-app
            # Create docker-compose.yml
            cat > /home/ubuntu/fullstack-app/docker-compose.yml << 'EOL'
            services:
              backend:
                image: ${DOCKER_USERNAME}/fullstack-app-backend:latest
                platform: linux/arm64
                ports:
                  - '3000:3000'
                environment:
                  - POSTGRES_HOST=db
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=postgres
                  - POSTGRES_DB=taskmanager
                depends_on:
                  - db
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              frontend:
                image: ${DOCKER_USERNAME}/fullstack-app-frontend:latest
                platform: linux/arm64
                ports:
                  - '80:80'
                depends_on:
                  backend:
                    condition: service_healthy

              db:
                image: postgres:15-alpine
                platform: linux/arm64
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=postgres
                  - POSTGRES_DB=taskmanager
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres"]
                  interval: 10s
                  timeout: 5s
                  retries: 5

            volumes:
              postgres_data:
            EOL
            # Set environment variables
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            # Pull and start services
            cd /home/ubuntu/fullstack-app
            docker-compose pull
            docker-compose up -d
            # Wait for services to be ready
            sleep 30
            # Verify services are running
            docker-compose ps
            # Check if ports are listening
            netstat -tulpn | grep LISTEN
            # Check docker logs
            docker-compose logs
            # Verify backend is accessible
            curl -f http://localhost:3000/health || echo "Backend health check failed"

  integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        working-directory: ./tests
        run: npm install --legacy-peer-deps
      - name: Run integration tests
        working-directory: ./tests
        env:
          APP_URL: ${{ secrets.AWS_HOST }}
          BACKEND_PORT: 3000
        run: |
          # Wait for backend to be ready
          for i in {1..30}; do
            if curl -s http://${{ secrets.AWS_HOST }}:3000/health > /dev/null; then
              echo "Backend is ready"
              break
            fi
            echo "Waiting for backend to be ready... ($i/30)"
            sleep 10
            if [ $i -eq 30 ]; then
              echo "Backend failed to become ready"
              exit 1
            fi
          done
          # Run tests
          npx codeceptjs run --steps --verbose 