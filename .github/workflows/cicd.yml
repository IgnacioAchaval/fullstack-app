name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
# ---------- TESTS ----------
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Backend tests
        working-directory: backend
        run: |
          npm ci
          npm test -- --coverage
      - name: Frontend tests
        working-directory: frontend
        run: |
          npm ci
          npm test -- --coverage

# ---------- BUILD & PUSH ----------
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push backend (:latest)
        uses: docker/build-push-action@v5
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fullstack-app-backend:latest

      - name: Build & push frontend (:latest)
        uses: docker/build-push-action@v5
        with:
          context: frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fullstack-app-frontend:latest

# ---------- DEPLOY ----------
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 (pull de Docker Hub)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}     # ej. ubuntu
          key:      ${{ secrets.AWS_KEY }}
          envs: |
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}
          script: |
            set -e
            cd /home/${{ secrets.AWS_USER }}/fullstack-app

            # 1) Iniciar sesión en Docker Hub (evita rate-limit)
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            # 2) Traer las últimas imágenes y recrear contenedores
            docker compose pull --include-deps
            docker compose up -d --pull always --force-recreate --remove-orphans

            # 3) Health-check (tus 30 intentos)
            for i in {1..30}; do
              if curl -s http://localhost:3000/health > /dev/null; then
                echo "✅ Backend is healthy"
                exit 0
              fi
              sleep 2
            done
            echo "❌ Backend failed to become healthy"
            exit 1

# ---------- INTEGRATION TESTS ----------
  integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Run integration tests
        working-directory: tests
        env:
          APP_URL: http://${{ secrets.AWS_HOST }}
        run: |
          npm install --legacy-peer-deps
          npx codeceptjs run --steps