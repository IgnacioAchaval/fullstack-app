name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
# ---------- TESTS ----------
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Backend tests
        working-directory: backend
        run: |
          npm ci
          npm test -- --coverage
      - name: Frontend tests
        working-directory: frontend
        run: |
          npm ci
          npm test -- --coverage

# ---------- BUILD & PUSH ----------
  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      # 1) Clona el repo para que existan ./backend y ./frontend
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) QEMU para multi-arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      # 3) Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4) Login Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5) Backend multi-arch
      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend          # <- ruta correcta
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: false
          tags: ${{ secrets.DOCKER_USERNAME }}/fullstack-app-backend:latest

      # 6) Frontend multi-arch
      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: false
          tags: ${{ secrets.DOCKER_USERNAME }}/fullstack-app-frontend:latest

# ---------- DEPLOY ----------
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    # 1) Exporta variables  
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

      # 2) Pásalas con `envs:` 
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key:      ${{ secrets.AWS_KEY }}
          envs: DOCKER_USERNAME,DOCKER_PASSWORD   # ← nombres, separados por coma

          # 3) Script.  Login opcional (safe)   
          script: |
            set -e
            cd /home/${{ secrets.AWS_USER }}/fullstack-app

            # ----- (OPCIONAL) login a Docker Hub -----
            if [ -n "$DOCKER_USERNAME" ] && [ -n "$DOCKER_PASSWORD" ]; then
              echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            fi

            # ----- Compatibilidad Compose v1/v2 -----
            if command -v "docker compose" >/dev/null 2>&1; then
              echo "🔄 Usando Docker Compose v2 (plugin)..."
              docker compose pull                       # sin --include-deps
              docker compose up -d --pull always --force-recreate --remove-orphans
            else
              echo "🔄 Usando Docker-Compose v1..."
              docker-compose pull
              # v1 no tiene --pull, pero ya hicimos pull arriba
              docker-compose up -d --force-recreate --remove-orphans
            fi

# ---------- INTEGRATION TESTS ----------
  integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Run integration tests
        working-directory: tests
        env:
          APP_URL: http://${{ secrets.AWS_HOST }}
        run: |
          npm install --legacy-peer-deps
          npx codeceptjs run --steps